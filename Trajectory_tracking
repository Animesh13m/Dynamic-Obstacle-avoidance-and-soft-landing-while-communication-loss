# Trajectory Implementation Overview

## Circular Trajectory

The circular trajectory models a drone flying at a constant altitude while moving in a perfect circle on the XY-plane. It helps assess the ability of the position controller to maintain radial and angular consistency.

**Parameters:**  
Radius `R`, Angular velocity `ω`, Constant height `z₀`

**Desired position equations:**  
- `x_d(t) = R · cos(ωt)`  
- `y_d(t) = R · sin(ωt)`  
- `z_d(t) = z₀`

This trajectory is implemented in Simulink using sine and cosine function blocks for `x` and `y`, while `z` remains constant. It provides a benchmark for stable lateral motion with no vertical variation.

---

## Helical-Like Trajectory

In this trajectory, the drone follows a circular path in the XY-plane while simultaneously ascending or descending along the Z-axis. It simulates spiral-like motion and is ideal for evaluating performance in vertical transitions.

**Parameters:**  
Radius `R`, Angular velocity `ω`, Vertical function `F(t)`, Initial height `z₀`

**Desired position equations:**  
- `x_d(t) = R · cos(ωt)`  
- `y_d(t) = R · sin(ωt)`  
- `z_d(t) = F(t) + z₀`

The vertical function `F(t)` may be linear (e.g., ramp input) or sinusoidal, implemented using time-dependent signal generators in Simulink. This allows smooth height variation combined with coordinated XY-plane motion.

---

## Cuboidal (Square-Wave) Trajectory

This trajectory approximates motion along the edges of a cuboid using square-wave signals. It tests the drone’s response to abrupt changes in position commands.

**Parameters:**  
Amplitudes `A_x`, `A_y`, `A_z` along respective axes

**Desired position equations:**  
- `x_d(t) = A_x · sgn(sin(πt/4))`  
- `y_d(t) = A_y · sgn(sin(πt/4 + π/2))`  
- `z_d(t) = A_z` if `sin(πt/2) ≥ 0`, else `-A_z`

Implemented with square-wave and signum functions in Simulink, this trajectory challenges the control system with sharp directional transitions.

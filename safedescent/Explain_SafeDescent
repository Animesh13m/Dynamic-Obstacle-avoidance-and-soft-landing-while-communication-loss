# 🛬 Safe Descent During Communication Loss

## 🧩 The Need for Safe Descent

In autonomous drone operations, loss of communication with the mission server can lead to serious instability. When this happens:

- The drone may **move randomly** due to outdated or missing commands.
as depected in **descent_risk.png**
- **Sensor data (e.g., from OptiTrack)** may become inaccurate or frozen.
- This poses a high **risk of collision or damage**, especially during indoor or tight-space flights.

A fallback mechanism is essential to ensure a **safe, controlled landing**, even in the absence of updated external inputs.

---

## 🎯 Motivation

This strategy is inspired by **On-Off control systems**, which emphasize reliable and quick switching in uncertain conditions.

- The goal is to **enable safe landing** without requiring continuous communication.
- Focus is placed on **robust fallback mechanisms** that operate independently of the mission server.
- This ensures the drone transitions into a **safe descent mode** automatically when connection is lost.

---

## ⚙️ Implementation Highlights

The system handles communication loss with the following key features:

- **Automatic transition** from trajectory tracking to an open-loop descent mode.
- Use of a **smooth sigmoidal throttle curve** to gradually reduce thrust.
- Maintenance of **attitude stabilization** (yaw, pitch, and roll) during the descent.
- **Persistent state monitoring** helps detect communication drops and prevent false triggers.

---

## 📥 Input Commands Monitored

- Roll and Pitch Commands  
- Communication Health Signal  
- Current Supplied Thrust  

---

## 🧠 Role of Persistent Variables

Persistent variables are used to retain important values between control cycles:

- Help in **tracking the last known control input** (e.g., throttle).
- Detect if a **communication loss has occurred or is ongoing**. **communication_signal.png**
- Allow the system to respond **gracefully** to noise or brief tracking glitches.
- Enable **autonomous fallback behavior** without depending on external signals. **Controlled_throttle.m**

---

## 🧮 Controlling Parameters for Smooth Descent
**Throttle_control_para.m**
To ensure a stable and safe landing, the following constraints are applied:

- **Max/Min Acceleration**: Controls the rate of throttle change to avoid sudden drops.
- **Max/Min Velocity**: Keeps the descent speed within safe physical limits.
- **Saturation Limits**: Prevents throttle values from exceeding hardware boundaries.
- **Sigmoidal Throttle Profile**: Ensures smooth, progressive reduction of thrust.

---

## 🧾 Summary: What Happens During Communication Loss

1. Communication failure is **detected using persistent memory**. **persistenceVar.m**
2. The system transitions to **Case 4 of the Finite State Machine (FSM)**.
3. Controller throttle output is **ignored**.
4. A **sigmoidal descent throttle profile** is activated.
5. The drone **gently descends** while maintaining attitude stability.
6. Upon reaching the ground, **motors shut down or idle** safely.

---

> ✅ This strategy ensures a reliable, damage-minimizing fallback mechanism to handle unexpected communication loss during drone flight operations.

